generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(USER)
  artist    Artist?
  tips      Tip[]
}

model Artist {
  id                String        @id @default(cuid())
  user              User          @relation(fields: [id], references: [id])
  bio               String?
  profilePictureUrl String?
  genres            String[]
  performances      Performance[]
  videos            Video[]
  routes            Route[]
  receivedTips      Tip[]
}

model Performance {
  id          String   @id @default(cuid())
  artist      Artist   @relation(fields: [artistId], references: [id])
  artistId    String
  location    Location @relation(fields: [locationId], references: [id])
  locationId  String
  startTime   DateTime
  endTime     DateTime
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tips        Tip[]
  videos      Video[]
}

model Location {
  id           String        @id @default(cuid())
  latitude     Float
  longitude    Float
  name         String?
  description  String?
  performances Performance[]
  routeStops   RouteStop[]
}

model Tip {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  artist        Artist      @relation(fields: [artistId], references: [id])
  artistId      String
  performance   Performance @relation(fields: [performanceId], references: [id])
  performanceId String
  amount        Float
  currency      String
  createdAt     DateTime    @default(now())
}

model Video {
  id            String      @id @default(cuid())
  artist        Artist      @relation(fields: [artistId], references: [id])
  artistId      String
  performance   Performance? @relation(fields: [performanceId], references: [id])
  performanceId String?
  url           String
  thumbnailUrl  String?
  duration      Int
  createdAt     DateTime    @default(now())
  expiresAt     DateTime
}

model Route {
  id        String      @id @default(cuid())
  artist    Artist      @relation(fields: [artistId], references: [id])
  artistId  String
  date      DateTime
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  stops     RouteStop[]
}

model RouteStop {
  id         String   @id @default(cuid())
  route      Route    @relation(fields: [routeId], references: [id])
  routeId    String
  location   Location @relation(fields: [locationId], references: [id])
  locationId String
  order      Int
  startTime  DateTime
  endTime    DateTime
}

enum Role {
  USER
  ARTIST
}